总结
做了啥，做的成果怎么样，概括实现做法。

本系统以开发一款完整的、可供用户体验的、带有创新性的游戏软件为目标进行缜密性开发。
目前，决战象棋游戏的研发还处于第一版，目前可以完整的体验到游戏的各个功能。
供玩家操作的核心功能有：走棋、加属性、再来一局、悔棋和复盘。这些核心功能的实现得益于数据层框架的完整搭建，
有了存储数据的载体和提供修改数据的方法，这些功能才能一一实现。
实现逻辑较简单的可供玩家操作的其他功能还有：返回、求和、认输。
这款游戏最主要的创新在于加入属性战斗模块，双方棋子通过战斗生存来简化棋局。
其中，属性的配置数据以Json格式存储为txt文件，方便日后对数据合理化调整，对游戏的可维护性提供了一种可能。
然后通过项目我还得到了一些关于代码的经验，就是正常的软件开发应该是懒惰式开发，
也称为忍耐式开发，这种开发的表现就是在写代码之前，代码员需要花费大量的时间去考虑所有可能的解决方案和途径。
先把问题理解清楚，把解决的问题解决了，再把架构梳理好，以这样的方式坚持下去，程序员会得到非常大的提高。
每个程序员都会有自己的书写风格和思维逻辑，项目工程的进行也不一样，但是没有规矩不成方圆，
继续学习并使用软件工程和一些编程的思维，使项目的进度和代码的风格都有所提高和改进。

技术难点与解决
难点1：棋子在移动时保证相关数据的映射关系精确无误。棋子以可走点位置为目标在移动完后，
需要知道它所在的二维坐标。因为有存储固定的三维坐标和二维坐标的映射Dictionary<Vector3, Vector2> coords，
所以按正常来说以棋子的三维坐标为key是可以访问对应的二维坐标的。但是，访问失败了，抛出的错误为没有对应的key值。

问题所在：后来发现，是Unity的Itween运动插件导致的。比如可走点三维坐标为(100,50,0)，对应二维坐标为(2,3)，
当棋子以此可走点的三维坐标为目标移动完后，棋子的三维坐标有可能是(100,50.0001,0)。导致以棋子三维坐标为key访问
对应的二维坐标失败了，因为确实不存在三维坐标为(100,50.0001,0)的key。

解决思路：将相关数据强制转换为整形，消除微弱差别的影响。

解决过程：每次棋子移动完后，在更新棋局映射时，分别对棋子x,y,z三个坐标变量强制为整形，再添加入映射
        for (int i = 0; i < chessList.Count; i++)
        {
            Vector3 pos = chessList[i].transform.position;
            Vector3 v3 = new Vector3((int)pos.x, (int)pos.y, (int)pos.z);//强制为整形，消除微弱差别的影响
            chess2Vector.Add(chessList[i], coords[v3]);
            vector2Chess.Add(coords[v3], chessList[i]);
        }

难点2：切换场景时保证相关数据完全清空。在切换场景时，经常抛出各种空引用异常和一些数据仍有保留的问题。

问题所在：后来发现，场景切换时销毁了所有物体。但在主场景中每个地方添加订阅的事件引用仍然存在，
或者对棋子对象操作的引用也依然存在，一些游戏状态的变量也依旧保留着。

解决思路：在切换场景或销毁物体时调用的方法内清空数据。

解决过程：在各个脚本内添加OnDestory函数，当物体销毁时，Unity会自动调用这个函数，因此在此函数内可以取消订阅相关事件。
然后在切换场景时，在OnSceneLoaded函数内重置相关游戏状态数据。

难点3：复盘时，需要获取当前步与前一步所有棋子的属性差异并显示出来。需要过滤掉阵亡棋子的信息。

解决思路：存储阵亡者与对应步数的信息，再遍历比较相邻两步棋子属性差异。

解决过程：在添加棋谱时，顺便检测当前是否发生过战斗，若发生了就添加阵亡者和对应步数的映射关系。有了这个关系后，
在复盘时，每次遍历相邻两步间的所有棋子差异前，首先判断棋子是否存在于这个映射关系中，若不存在说明此棋子在当前步还未阵亡，可以往下比较属性。
若存在说明棋子是阵亡的，要再继续判断棋子阵亡的步数是否小于等于当前步，若是则过无需比较属性，过滤掉此棋子，否则就是在未来才阵亡的，要继续比较属性。



展望：目前这一版的决战象棋游戏是可以完整体验的一个版本，但我希望不仅于此，我还打算在未来拓展更多的新功能。
在未来，希望可以实现决战象棋的AI功能，这不仅需要借鉴博弈论和普通象棋AI算法，还要结合考虑战斗属性比较的因素，改进甚至重组出属于决战象棋的AI功能。
希望还可以实现棋盘可走点衰减功能，即缩小安全区的功能，这需要考虑棋盘可走点映射的相关移除带来的一系列影响。
总之，我希望我的想法在未来可以一一实现，打造出全新的游戏，给用户带来不一样的游戏体验。



